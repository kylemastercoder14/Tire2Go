generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String   @id @default(uuid())
  authId          String?  @unique // from Clerk
  email           String   @unique
  password        String
  firstName       String
  lastName        String
  mobileNumber    String
  ipAddress       String?
  userAgent       String?
  deviceType      String? // mobile/tablet/desktop
  isEmailVerified Boolean  @default(false)
  role            String   @default("USER") // USER, ADMIN
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  feedback         Feedback[]
  ticket           Ticket[]
  cart             Cart[]
  systemLogs       SystemLogs[]
  order            Order[]
  forwardedMessage ForwardedMessage[]
}

model Staff {
  id              String   @id @default(uuid())
  firstName       String
  lastName        String
  email           String   @unique
  password        String
  role            String // e.g., "Manager", "Sales", "Support"
  isEmailVerified Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Brands {
  id          String   @id @default(uuid())
  name        String
  description String
  logo        String
  type        String // e.g., "Premium", "Mid-range", "Budget"
  thumbnail   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Products[]
}

model Products {
  id              String   @id @default(uuid())
  name            String
  promotionsId    String?
  description     String
  price           Float
  images          String[]
  inclusion       String
  warranty        String
  tireSize        String
  isClearanceSale Boolean  @default(false)
  discountedPrice Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  brandId String
  brand   Brands @relation(fields: [brandId], references: [id])

  inventory Inventory[]
  cartItem  CartItem[]
  orderItem OrderItem[]
}

model Inventory {
  id            String    @id @default(uuid())
  quantity      Int // current stock on hand
  minStock      Int // threshold for "low stock" alerts
  maxStock      Int? // optional: max capacity (warehouse limit)
  sku           String?   @unique
  status        String    @default("IN_STOCK") // IN_STOCK, LOW_STOCK, OUT_OF_STOCK, DISCONTINUED
  lastRestocked DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  productId String
  product   Products @relation(fields: [productId], references: [id])
}

model TipsGuides {
  id        String   @id @default(uuid())
  title     String
  content   String
  thumbnail String?
  category  String // e.g., "Maintenance", "Buying Guide", "Safety Tips"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faqs {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Policies {
  id        String   @id @default(uuid())
  type      String // e.g., "Privacy Policy", "Return Policy", "Shipping Policy"
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Promotions {
  id          String   @id @default(uuid())
  name        String
  description String
  criteria    String
  thumbnail   String
  startDate   DateTime
  endDate     DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  rating    Int // e.g., 1 to 5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user Users @relation(fields: [userId], references: [id])
}

model Ticket {
  id          String         @id @default(uuid())
  userId      String
  subject     String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user Users @relation(fields: [userId], references: [id])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     Users      @relation(fields: [userId], references: [id])
  cartItem CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  price     Float // price at the time of adding to cart
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart     @relation(fields: [cartId], references: [id])
  product Products @relation(fields: [productId], references: [id])
}

model SystemLogs {
  id        String   @id @default(uuid())
  action    String
  userId    String?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())

  user Users? @relation(fields: [userId], references: [id])
}

model Order {
  id               String        @id @default(uuid())
  userId           String
  totalAmount      Float
  discountedAmount Float?
  name             String
  email            String
  phoneNumber      String
  status           OrderStatus   @default(PENDING)
  paymentStatus    PaymentStatus @default(PENDING)
  orderOption      String
  preferredDate    DateTime
  remarks          String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  processingAt DateTime?
  shippedAt    DateTime?
  completedAt  DateTime?

  reasonCancelled String?
  cancelledAt     DateTime?

  user      Users       @relation(fields: [userId], references: [id])
  orderItem OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float // unit price
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order    @relation(fields: [orderId], references: [id])
  product Products @relation(fields: [productId], references: [id])
}

model ForwardedMessage {
  id        String                 @id @default(cuid())
  userId    String? // if you have authentication, otherwise optional
  user      Users?                 @relation(fields: [userId], references: [authId])
  message   String
  status    ForwardedMessageStatus @default(PENDING)
  reply     String? // adminâ€™s reply
  repliedAt DateTime? // when admin replied
  createdAt DateTime               @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ForwardedMessageStatus {
  PENDING
  SEEN
  RESOLVED
}
